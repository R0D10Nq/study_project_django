from django.http import (
    JsonResponse,
    HttpResponseBadRequest,
    HttpResponseForbidden,
)
from django.views.decorators.http import require_POST, require_GET
from django.views.decorators.csrf import csrf_protect
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.db import transaction
from django.utils.html import escape

from telegram.utils.bot import Telegram
from core.chunks.queries.chunk import ChunkQuery
from core.models import Chunk, LocalLandingData
from core.chunks.helpers import chunk as core_chunk
from core.helpers import (
    get_landing,
    settings,
    prettify_html,
    converted_image,
    is_prod,
    check_raster_svg,
    get_current_page,
    enable_local_data,
)
from core.settings import BASE_DIR

import os
import re
import logging
from urllib.parse import urlparse
from typing import Dict, Any, Optional, Union

logger = logging.getLogger('chunks')


@csrf_protect
@require_POST
def chunk_update(request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–∞
    
    :param request: –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ Django
    :return: JsonResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        chunk_name = request.POST.get("chunk_name")
        module_path = request.POST.get("module_path", "all")
        content = request.POST.get("content", "")
        update_image = request.FILES.get("update_image")
        is_image_update = request.POST.get("is_image_update") == "true"
        image_extension = request.POST.get("image_extension", "")
        through = request.POST.get("through") != "false"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ chunk_name
        if not chunk_name:
            return HttpResponseBadRequest("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä chunk_name")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        page = get_current_page()
        page_id = page.id if page else None
        page_path = urlparse(request.META.get("HTTP_REFERER", "")).path
        landing = get_landing()
        
        if not landing:
            return HttpResponseBadRequest("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–µ–Ω–¥–∏–Ω–≥")
        
        file_name = None
        is_create = False
        local_chunk = None
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ SVG
        is_svg = image_extension in (".svg", ".svg+xml")
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if is_image_update and not update_image:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 
            # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞
            chunk_value = ChunkQuery.get_chunk(name=chunk_name)
            
            if not chunk_value:
                return HttpResponseBadRequest(f"–ß–∞–Ω–∫ {chunk_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            if not through and chunk_value.custom_content and chunk_value.custom_content.get(str(page_id)):
                content = chunk_value.custom_content[str(page_id)]
            else:
                content = chunk_value.content
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if update_image:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SVG-—Ñ–∞–π–ª–æ–≤
            if is_svg and check_raster_svg(update_image, is_svg):
                return JsonResponse({
                    "success": False,
                    "error": "–í–Ω—É—Ç—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ SVG –ª–µ–∂–∏—Ç —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–∞!",
                }, status=400)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            image_size = update_image.size
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if not chunk_name.endswith(image_extension):
                name, _ = os.path.splitext(str(chunk_name))
                file_name = f"{module_path}/uploaded/{name}{image_extension}"
            else:
                file_name = f"{module_path}/uploaded/{chunk_name}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            file_path = os.path.join(settings().MEDIA_ROOT, file_name)
            file_path_relative = file_path.replace(str(BASE_DIR), "")
            file_path_relative = re.sub(r'^\.*\/', '', file_path_relative).replace("media/", "")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try:
                saved_image = default_storage.save(file_path_relative, ContentFile(update_image.read()))
                file_name = os.path.join("media", saved_image)
                file_name_new = saved_image.replace(f"{landing.app_name}/", "")
                
                # –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ production
                if is_prod and not is_svg and image_size >= 204800:
                    result = converted_image(os.path.join(settings().MEDIA_ROOT, file_name_new))
                    
                    if result is None or not isinstance(result, str):
                        if os.path.isfile(os.path.join(settings().MEDIA_ROOT, file_name_new)):
                            os.remove(os.path.join(settings().MEDIA_ROOT, file_name_new))
                            
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞–Ω–∫–∞ {chunk_name} –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ {landing.domain}")
                        Telegram(chat_id="system").send_message(
                            f"üî¥ *ImageCompressed*: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n*–õ—ç–Ω–¥–∏–Ω–≥*: *{landing.domain}*"
                        )
                        
                        return JsonResponse({
                            "success": False,
                            "error": "–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ: .jpg, .jpeg, .png, .webp, .svg",
                        }, status=400)
                
                content = file_name_new
                chunk_value = ChunkQuery.get_chunk(name=chunk_name)
                is_create = chunk_value is None
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —á–∞–Ω–∫–∞ {chunk_name}: {str(e)}")
                return JsonResponse({
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                }, status=500)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª
        if not update_image and isinstance(content, str):
            content = prettify_html(content)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –≤ –ë–î —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with transaction.atomic():
            chunk = ChunkQuery.update(
                name=chunk_name,
                content=content,
                create=is_create,
                through=through
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if enable_local_data(request, page_path):
            user = request.user if request.user.is_authenticated else None
            local_data_instance = LocalLandingData.objects.filter(causer=user, landing=landing).first()
            if local_data_instance and "chunk" in local_data_instance.temp_data:
                local_chunk = local_data_instance.temp_data["chunk"].get(chunk_name)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if not local_chunk:
            response = {
                "success": bool(chunk.pk) if chunk else False,
                "chunk": chunk.pk if chunk else None,
            }
        else:
            response = {
                "success": bool(chunk) if chunk else False,
                "chunk": chunk if chunk else None,
            }

        if update_image:
            response["new_src"] = f"/{file_name}"
        else:
            response["new_content"] = content

        return JsonResponse(response)
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ chunk_update: {str(e)}")
        return JsonResponse({
            "success": False, 
            "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }, status=500)


@require_GET
def chunk_get(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–∞
    
    :param request: –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ Django
    :return: JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞–Ω–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        chunk_name = request.GET.get("chunk_name")
        module = request.GET.get("module")
        through = request.GET.get("through")
        is_image = request.GET.get("is_image") == "true"
        
        if not chunk_name:
            return HttpResponseBadRequest("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä chunk_name")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        page_path = urlparse(request.META.get("HTTP_REFERER", "")).path
        landing = get_landing()
        page = get_current_page()
        
        if not landing:
            return HttpResponseBadRequest("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–µ–Ω–¥–∏–Ω–≥")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º select_related –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        chunk_obj = Chunk.objects.filter(landing=landing, name=chunk_name).first()
        
        local_through = through
        local_chunk = None
        chunk_content = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if enable_local_data(request, page_path):
            user = request.user if request.user.is_authenticated else None
            local_data_instance = LocalLandingData.objects.filter(
                causer=user, 
                landing=landing
            ).first()
            
            if local_data_instance and "chunk" in local_data_instance.temp_data:
                chunk_data = local_data_instance.temp_data["chunk"].get(chunk_name)
                
                if chunk_data:
                    local_chunk = True
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ through
                    if through == "undefined" and "through" in chunk_data:
                        local_through = str(chunk_data.get("through")).lower()
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                    if page and local_through == "false" and "custom_content" in chunk_data:
                        chunk_content = chunk_data["custom_content"].get(str(page.id))
                    else:
                        chunk_content = chunk_data.get("content")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ë–î
        if not local_chunk:
            chunk_content = core_chunk(name=chunk_name, module=module, wrap=False, through=through)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ through
        if chunk_obj:
            if local_through is not None:
                through_status = local_through != "false"
            else:
                through_status = chunk_obj.through
        else:
            through_status = True
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        full_path = f"/media/{landing.app_name}/{chunk_content}" if is_image and chunk_content else None
        
        return JsonResponse({
            "success": bool(chunk_content),
            "chunk": chunk_content,
            "through": through_status,
            "full_path": full_path
        })
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ chunk_get: {str(e)}")
        return JsonResponse({
            "success": False, 
            "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }, status=500)
